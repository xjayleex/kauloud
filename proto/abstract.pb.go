// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: abstract.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WorkloadType int32

const (
	WorkloadType_VirtualMachineType WorkloadType = 0
	WorkloadType_ContainerType      WorkloadType = 1
)

// Enum value maps for WorkloadType.
var (
	WorkloadType_name = map[int32]string{
		0: "VirtualMachineType",
		1: "ContainerType",
	}
	WorkloadType_value = map[string]int32{
		"VirtualMachineType": 0,
		"ContainerType":      1,
	}
)

func (x WorkloadType) Enum() *WorkloadType {
	p := new(WorkloadType)
	*p = x
	return p
}

func (x WorkloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_abstract_proto_enumTypes[0].Descriptor()
}

func (WorkloadType) Type() protoreflect.EnumType {
	return &file_abstract_proto_enumTypes[0]
}

func (x WorkloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadType.Descriptor instead.
func (WorkloadType) EnumDescriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{0}
}

type VirtualMachineSpec_Type int32

const (
	VirtualMachineSpec_CPU VirtualMachineSpec_Type = 0
	VirtualMachineSpec_GPU VirtualMachineSpec_Type = 1
)

// Enum value maps for VirtualMachineSpec_Type.
var (
	VirtualMachineSpec_Type_name = map[int32]string{
		0: "CPU",
		1: "GPU",
	}
	VirtualMachineSpec_Type_value = map[string]int32{
		"CPU": 0,
		"GPU": 1,
	}
)

func (x VirtualMachineSpec_Type) Enum() *VirtualMachineSpec_Type {
	p := new(VirtualMachineSpec_Type)
	*p = x
	return p
}

func (x VirtualMachineSpec_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirtualMachineSpec_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_abstract_proto_enumTypes[1].Descriptor()
}

func (VirtualMachineSpec_Type) Type() protoreflect.EnumType {
	return &file_abstract_proto_enumTypes[1]
}

func (x VirtualMachineSpec_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirtualMachineSpec_Type.Descriptor instead.
func (VirtualMachineSpec_Type) EnumDescriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{7, 0}
}

type UserID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid,omitempty"`
}

func (x *UserID) Reset() {
	*x = UserID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserID) ProtoMessage() {}

func (x *UserID) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserID.ProtoReflect.Descriptor instead.
func (*UserID) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{0}
}

func (x *UserID) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

type VirtualMachineStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualMachineStatusMap map[string]*VirtualMachineStatus `protobuf:"bytes,1,rep,name=virtual_machine_status_map,json=virtualMachineStatusMap,proto3" json:"virtual_machine_status_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VirtualMachineStats) Reset() {
	*x = VirtualMachineStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineStats) ProtoMessage() {}

func (x *VirtualMachineStats) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineStats.ProtoReflect.Descriptor instead.
func (*VirtualMachineStats) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{1}
}

func (x *VirtualMachineStats) GetVirtualMachineStatusMap() map[string]*VirtualMachineStatus {
	if x != nil {
		return x.VirtualMachineStatusMap
	}
	return nil
}

type VirtualMachineStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsReady   bool   `protobuf:"varint,1,opt,name=is_ready,json=isReady,proto3" json:"is_ready,omitempty"`
	Progress  string `protobuf:"bytes,2,opt,name=progress,proto3" json:"progress,omitempty"`
	IsRunning bool   `protobuf:"varint,3,opt,name=is_running,json=isRunning,proto3" json:"is_running,omitempty"`
	ClusterIp string `protobuf:"bytes,4,opt,name=cluster_ip,json=clusterIp,proto3" json:"cluster_ip,omitempty"`
	UUID      string `protobuf:"bytes,5,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Owner     string `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *VirtualMachineStatus) Reset() {
	*x = VirtualMachineStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineStatus) ProtoMessage() {}

func (x *VirtualMachineStatus) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineStatus.ProtoReflect.Descriptor instead.
func (*VirtualMachineStatus) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{2}
}

func (x *VirtualMachineStatus) GetIsReady() bool {
	if x != nil {
		return x.IsReady
	}
	return false
}

func (x *VirtualMachineStatus) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *VirtualMachineStatus) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *VirtualMachineStatus) GetClusterIp() string {
	if x != nil {
		return x.ClusterIp
	}
	return ""
}

func (x *VirtualMachineStatus) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *VirtualMachineStatus) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type WorkloadMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	UUID  string `protobuf:"bytes,2,opt,name=UUID,proto3" json:"UUID,omitempty"`
}

func (x *WorkloadMeta) Reset() {
	*x = WorkloadMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadMeta) ProtoMessage() {}

func (x *WorkloadMeta) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadMeta.ProtoReflect.Descriptor instead.
func (*WorkloadMeta) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{3}
}

func (x *WorkloadMeta) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *WorkloadMeta) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

type WorkloadObjectNameMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VirtualMachine string `protobuf:"bytes,1,opt,name=virtual_machine,json=virtualMachine,proto3" json:"virtual_machine,omitempty"`
	ClusterIp      string `protobuf:"bytes,2,opt,name=cluster_ip,json=clusterIp,proto3" json:"cluster_ip,omitempty"`
}

func (x *WorkloadObjectNameMeta) Reset() {
	*x = WorkloadObjectNameMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadObjectNameMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadObjectNameMeta) ProtoMessage() {}

func (x *WorkloadObjectNameMeta) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadObjectNameMeta.ProtoReflect.Descriptor instead.
func (*WorkloadObjectNameMeta) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{4}
}

func (x *WorkloadObjectNameMeta) GetVirtualMachine() string {
	if x != nil {
		return x.VirtualMachine
	}
	return ""
}

func (x *WorkloadObjectNameMeta) GetClusterIp() string {
	if x != nil {
		return x.ClusterIp
	}
	return ""
}

type DummyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok         bool   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Additional string `protobuf:"bytes,2,opt,name=additional,proto3" json:"additional,omitempty"`
}

func (x *DummyResponse) Reset() {
	*x = DummyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyResponse) ProtoMessage() {}

func (x *DummyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyResponse.ProtoReflect.Descriptor instead.
func (*DummyResponse) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{5}
}

func (x *DummyResponse) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

func (x *DummyResponse) GetAdditional() string {
	if x != nil {
		return x.Additional
	}
	return ""
}

type DummyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DummyRequest) Reset() {
	*x = DummyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyRequest) ProtoMessage() {}

func (x *DummyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyRequest.ProtoReflect.Descriptor instead.
func (*DummyRequest) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{6}
}

type VirtualMachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cores                  int32                `protobuf:"varint,1,opt,name=cores,proto3" json:"cores,omitempty"`
	MemoryInGb             int32                `protobuf:"varint,2,opt,name=memory_in_gb,json=memoryInGb,proto3" json:"memory_in_gb,omitempty"`
	EphemeralStorageInGb   int32                `protobuf:"varint,3,opt,name=ephemeral_storage_in_gb,json=ephemeralStorageInGb,proto3" json:"ephemeral_storage_in_gb,omitempty"`
	RootDataVolumeSizeInGb string               `protobuf:"bytes,4,opt,name=root_data_volume_size_in_gb,json=rootDataVolumeSizeInGb,proto3" json:"root_data_volume_size_in_gb,omitempty"`
	Image                  string               `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	CloudInitUserData      []*CloudInitUserData `protobuf:"bytes,6,rep,name=cloud_init_user_data,json=cloudInitUserData,proto3" json:"cloud_init_user_data,omitempty"`
}

func (x *VirtualMachineSpec) Reset() {
	*x = VirtualMachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualMachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualMachineSpec) ProtoMessage() {}

func (x *VirtualMachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualMachineSpec.ProtoReflect.Descriptor instead.
func (*VirtualMachineSpec) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{7}
}

func (x *VirtualMachineSpec) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *VirtualMachineSpec) GetMemoryInGb() int32 {
	if x != nil {
		return x.MemoryInGb
	}
	return 0
}

func (x *VirtualMachineSpec) GetEphemeralStorageInGb() int32 {
	if x != nil {
		return x.EphemeralStorageInGb
	}
	return 0
}

func (x *VirtualMachineSpec) GetRootDataVolumeSizeInGb() string {
	if x != nil {
		return x.RootDataVolumeSizeInGb
	}
	return ""
}

func (x *VirtualMachineSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *VirtualMachineSpec) GetCloudInitUserData() []*CloudInitUserData {
	if x != nil {
		return x.CloudInitUserData
	}
	return nil
}

type CloudInitUserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *CloudInitUserData) Reset() {
	*x = CloudInitUserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudInitUserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudInitUserData) ProtoMessage() {}

func (x *CloudInitUserData) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudInitUserData.ProtoReflect.Descriptor instead.
func (*CloudInitUserData) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{8}
}

func (x *CloudInitUserData) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CloudInitUserData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VmCreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string              `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VirtualMachineSpec *VirtualMachineSpec `protobuf:"bytes,2,opt,name=virtual_machine_spec,json=virtualMachineSpec,proto3" json:"virtual_machine_spec,omitempty"`
}

func (x *VmCreationRequest) Reset() {
	*x = VmCreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmCreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmCreationRequest) ProtoMessage() {}

func (x *VmCreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmCreationRequest.ProtoReflect.Descriptor instead.
func (*VmCreationRequest) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{9}
}

func (x *VmCreationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *VmCreationRequest) GetVirtualMachineSpec() *VirtualMachineSpec {
	if x != nil {
		return x.VirtualMachineSpec
	}
	return nil
}

type VmDeletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameMeta *WorkloadObjectNameMeta `protobuf:"bytes,1,opt,name=name_meta,json=nameMeta,proto3" json:"name_meta,omitempty"`
}

func (x *VmDeletionRequest) Reset() {
	*x = VmDeletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VmDeletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VmDeletionRequest) ProtoMessage() {}

func (x *VmDeletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VmDeletionRequest.ProtoReflect.Descriptor instead.
func (*VmDeletionRequest) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{10}
}

func (x *VmDeletionRequest) GetNameMeta() *WorkloadObjectNameMeta {
	if x != nil {
		return x.NameMeta
	}
	return nil
}

type WorkloadInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         WorkloadType           `protobuf:"varint,1,opt,name=type,proto3,enum=proto.WorkloadType" json:"type,omitempty"`
	UserId       string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Token        string                 `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	WorkloadName string                 `protobuf:"bytes,4,opt,name=workload_name,json=workloadName,proto3" json:"workload_name,omitempty"`
	Spec         *ContainerResourceSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *WorkloadInfo) Reset() {
	*x = WorkloadInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadInfo) ProtoMessage() {}

func (x *WorkloadInfo) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadInfo.ProtoReflect.Descriptor instead.
func (*WorkloadInfo) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{11}
}

func (x *WorkloadInfo) GetType() WorkloadType {
	if x != nil {
		return x.Type
	}
	return WorkloadType_VirtualMachineType
}

func (x *WorkloadInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *WorkloadInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *WorkloadInfo) GetWorkloadName() string {
	if x != nil {
		return x.WorkloadName
	}
	return ""
}

func (x *WorkloadInfo) GetSpec() *ContainerResourceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ContainerResourceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources   *Resources   `protobuf:"bytes,1,opt,name=resources,proto3" json:"resources,omitempty"`
	ImageCode   string       `protobuf:"bytes,2,opt,name=image_code,json=imageCode,proto3" json:"image_code,omitempty"`
	HostAliases []*HostAlias `protobuf:"bytes,3,rep,name=host_aliases,json=hostAliases,proto3" json:"host_aliases,omitempty"`
}

func (x *ContainerResourceSpec) Reset() {
	*x = ContainerResourceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerResourceSpec) ProtoMessage() {}

func (x *ContainerResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerResourceSpec.ProtoReflect.Descriptor instead.
func (*ContainerResourceSpec) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{12}
}

func (x *ContainerResourceSpec) GetResources() *Resources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ContainerResourceSpec) GetImageCode() string {
	if x != nil {
		return x.ImageCode
	}
	return ""
}

func (x *ContainerResourceSpec) GetHostAliases() []*HostAlias {
	if x != nil {
		return x.HostAliases
	}
	return nil
}

type Resources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu       string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory    string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Gpu       *Gpu   `protobuf:"bytes,3,opt,name=gpu,proto3" json:"gpu,omitempty"`
	Ephemeral string `protobuf:"bytes,4,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
}

func (x *Resources) Reset() {
	*x = Resources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resources) ProtoMessage() {}

func (x *Resources) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resources.ProtoReflect.Descriptor instead.
func (*Resources) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{13}
}

func (x *Resources) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *Resources) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *Resources) GetGpu() *Gpu {
	if x != nil {
		return x.Gpu
	}
	return nil
}

func (x *Resources) GetEphemeral() string {
	if x != nil {
		return x.Ephemeral
	}
	return ""
}

type Gpu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (x *Gpu) Reset() {
	*x = Gpu{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gpu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gpu) ProtoMessage() {}

func (x *Gpu) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gpu.ProtoReflect.Descriptor instead.
func (*Gpu) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{14}
}

func (x *Gpu) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Gpu) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type HostAlias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpAddress string   `protobuf:"bytes,1,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	HostNames []string `protobuf:"bytes,2,rep,name=host_names,json=hostNames,proto3" json:"host_names,omitempty"`
}

func (x *HostAlias) Reset() {
	*x = HostAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_abstract_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostAlias) ProtoMessage() {}

func (x *HostAlias) ProtoReflect() protoreflect.Message {
	mi := &file_abstract_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostAlias.ProtoReflect.Descriptor instead.
func (*HostAlias) Descriptor() ([]byte, []int) {
	return file_abstract_proto_rawDescGZIP(), []int{15}
}

func (x *HostAlias) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *HostAlias) GetHostNames() []string {
	if x != nil {
		return x.HostNames
	}
	return nil
}

var File_abstract_proto protoreflect.FileDescriptor

var file_abstract_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x22, 0xf4, 0x01, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x74,
	0x0a, 0x1a, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x61, 0x70, 0x1a, 0x67, 0x0a, 0x1c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01,
	0x0a, 0x14, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x38, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x22,
	0x60, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49,
	0x70, 0x22, 0x3f, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x22, 0x0e, 0x0a, 0x0c, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xbb, 0x02, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x47,
	0x62, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x3b, 0x0a, 0x1b, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72,
	0x6f, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x47, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x14, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x18, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x50, 0x55, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x10, 0x01,
	0x22, 0x48, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x79, 0x0a, 0x11, 0x56, 0x6d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x12, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x22, 0x4f, 0x0a, 0x11, 0x56, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6e, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xbd, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x2e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x33, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6c, 0x69,
	0x61, 0x73, 0x65, 0x73, 0x22, 0x71, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x03, 0x67,
	0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x70, 0x75, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x70,
	0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x40, 0x0a, 0x03, 0x47, 0x70, 0x75, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x49, 0x0a, 0x09, 0x48, 0x6f, 0x73,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x2a, 0x39, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x01, 0x32,
	0xc0, 0x02, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x1a, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x0d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0d, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xb5, 0x04, 0x0a, 0x15, 0x56, 0x69, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44,
	0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_abstract_proto_rawDescOnce sync.Once
	file_abstract_proto_rawDescData = file_abstract_proto_rawDesc
)

func file_abstract_proto_rawDescGZIP() []byte {
	file_abstract_proto_rawDescOnce.Do(func() {
		file_abstract_proto_rawDescData = protoimpl.X.CompressGZIP(file_abstract_proto_rawDescData)
	})
	return file_abstract_proto_rawDescData
}

var file_abstract_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_abstract_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_abstract_proto_goTypes = []interface{}{
	(WorkloadType)(0),              // 0: proto.WorkloadType
	(VirtualMachineSpec_Type)(0),   // 1: proto.VirtualMachineSpec.Type
	(*UserID)(nil),                 // 2: proto.UserID
	(*VirtualMachineStats)(nil),    // 3: proto.VirtualMachineStats
	(*VirtualMachineStatus)(nil),   // 4: proto.VirtualMachineStatus
	(*WorkloadMeta)(nil),           // 5: proto.WorkloadMeta
	(*WorkloadObjectNameMeta)(nil), // 6: proto.WorkloadObjectNameMeta
	(*DummyResponse)(nil),          // 7: proto.DummyResponse
	(*DummyRequest)(nil),           // 8: proto.DummyRequest
	(*VirtualMachineSpec)(nil),     // 9: proto.VirtualMachineSpec
	(*CloudInitUserData)(nil),      // 10: proto.CloudInitUserData
	(*VmCreationRequest)(nil),      // 11: proto.VmCreationRequest
	(*VmDeletionRequest)(nil),      // 12: proto.VmDeletionRequest
	(*WorkloadInfo)(nil),           // 13: proto.WorkloadInfo
	(*ContainerResourceSpec)(nil),  // 14: proto.ContainerResourceSpec
	(*Resources)(nil),              // 15: proto.Resources
	(*Gpu)(nil),                    // 16: proto.Gpu
	(*HostAlias)(nil),              // 17: proto.HostAlias
	nil,                            // 18: proto.VirtualMachineStats.VirtualMachineStatusMapEntry
	(*empty.Empty)(nil),            // 19: google.protobuf.Empty
}
var file_abstract_proto_depIdxs = []int32{
	18, // 0: proto.VirtualMachineStats.virtual_machine_status_map:type_name -> proto.VirtualMachineStats.VirtualMachineStatusMapEntry
	10, // 1: proto.VirtualMachineSpec.cloud_init_user_data:type_name -> proto.CloudInitUserData
	9,  // 2: proto.VmCreationRequest.virtual_machine_spec:type_name -> proto.VirtualMachineSpec
	6,  // 3: proto.VmDeletionRequest.name_meta:type_name -> proto.WorkloadObjectNameMeta
	0,  // 4: proto.WorkloadInfo.type:type_name -> proto.WorkloadType
	14, // 5: proto.WorkloadInfo.spec:type_name -> proto.ContainerResourceSpec
	15, // 6: proto.ContainerResourceSpec.resources:type_name -> proto.Resources
	17, // 7: proto.ContainerResourceSpec.host_aliases:type_name -> proto.HostAlias
	16, // 8: proto.Resources.gpu:type_name -> proto.Gpu
	4,  // 9: proto.VirtualMachineStats.VirtualMachineStatusMapEntry.value:type_name -> proto.VirtualMachineStatus
	19, // 10: proto.WorkloadStatusService.ListAllVirtualMachineStats:input_type -> google.protobuf.Empty
	2,  // 11: proto.WorkloadStatusService.ListUserVirtualMachineStats:input_type -> proto.UserID
	5,  // 12: proto.WorkloadStatusService.GetWorkloadObjectNameMeta:input_type -> proto.WorkloadMeta
	13, // 13: proto.WorkloadStatusService.IsAllocatable:input_type -> proto.WorkloadInfo
	11, // 14: proto.VirtManagementService.CreateVirtualMachine:input_type -> proto.VmCreationRequest
	12, // 15: proto.VirtManagementService.DeleteVirtualMachine:input_type -> proto.VmDeletionRequest
	8,  // 16: proto.VirtManagementService.StartVirtualMachine:input_type -> proto.DummyRequest
	8,  // 17: proto.VirtManagementService.StopVirtualMachine:input_type -> proto.DummyRequest
	8,  // 18: proto.VirtManagementService.RestartVirtualMachine:input_type -> proto.DummyRequest
	8,  // 19: proto.VirtManagementService.ListVirtualMachine:input_type -> proto.DummyRequest
	8,  // 20: proto.VirtManagementService.ListVirtualMachineInstance:input_type -> proto.DummyRequest
	8,  // 21: proto.VirtManagementService.ListDataVolume:input_type -> proto.DummyRequest
	3,  // 22: proto.WorkloadStatusService.ListAllVirtualMachineStats:output_type -> proto.VirtualMachineStats
	3,  // 23: proto.WorkloadStatusService.ListUserVirtualMachineStats:output_type -> proto.VirtualMachineStats
	6,  // 24: proto.WorkloadStatusService.GetWorkloadObjectNameMeta:output_type -> proto.WorkloadObjectNameMeta
	7,  // 25: proto.WorkloadStatusService.IsAllocatable:output_type -> proto.DummyResponse
	7,  // 26: proto.VirtManagementService.CreateVirtualMachine:output_type -> proto.DummyResponse
	7,  // 27: proto.VirtManagementService.DeleteVirtualMachine:output_type -> proto.DummyResponse
	7,  // 28: proto.VirtManagementService.StartVirtualMachine:output_type -> proto.DummyResponse
	7,  // 29: proto.VirtManagementService.StopVirtualMachine:output_type -> proto.DummyResponse
	7,  // 30: proto.VirtManagementService.RestartVirtualMachine:output_type -> proto.DummyResponse
	7,  // 31: proto.VirtManagementService.ListVirtualMachine:output_type -> proto.DummyResponse
	7,  // 32: proto.VirtManagementService.ListVirtualMachineInstance:output_type -> proto.DummyResponse
	7,  // 33: proto.VirtManagementService.ListDataVolume:output_type -> proto.DummyResponse
	22, // [22:34] is the sub-list for method output_type
	10, // [10:22] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_abstract_proto_init() }
func file_abstract_proto_init() {
	if File_abstract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_abstract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadObjectNameMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualMachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudInitUserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmCreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VmDeletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerResourceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gpu); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_abstract_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_abstract_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_abstract_proto_goTypes,
		DependencyIndexes: file_abstract_proto_depIdxs,
		EnumInfos:         file_abstract_proto_enumTypes,
		MessageInfos:      file_abstract_proto_msgTypes,
	}.Build()
	File_abstract_proto = out.File
	file_abstract_proto_rawDesc = nil
	file_abstract_proto_goTypes = nil
	file_abstract_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorkloadStatusServiceClient is the client API for WorkloadStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkloadStatusServiceClient interface {
	ListAllVirtualMachineStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VirtualMachineStats, error)
	ListUserVirtualMachineStats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*VirtualMachineStats, error)
	GetWorkloadObjectNameMeta(ctx context.Context, in *WorkloadMeta, opts ...grpc.CallOption) (*WorkloadObjectNameMeta, error)
	IsAllocatable(ctx context.Context, in *WorkloadInfo, opts ...grpc.CallOption) (*DummyResponse, error)
}

type workloadStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadStatusServiceClient(cc grpc.ClientConnInterface) WorkloadStatusServiceClient {
	return &workloadStatusServiceClient{cc}
}

func (c *workloadStatusServiceClient) ListAllVirtualMachineStats(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VirtualMachineStats, error) {
	out := new(VirtualMachineStats)
	err := c.cc.Invoke(ctx, "/proto.WorkloadStatusService/ListAllVirtualMachineStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadStatusServiceClient) ListUserVirtualMachineStats(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*VirtualMachineStats, error) {
	out := new(VirtualMachineStats)
	err := c.cc.Invoke(ctx, "/proto.WorkloadStatusService/ListUserVirtualMachineStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadStatusServiceClient) GetWorkloadObjectNameMeta(ctx context.Context, in *WorkloadMeta, opts ...grpc.CallOption) (*WorkloadObjectNameMeta, error) {
	out := new(WorkloadObjectNameMeta)
	err := c.cc.Invoke(ctx, "/proto.WorkloadStatusService/GetWorkloadObjectNameMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadStatusServiceClient) IsAllocatable(ctx context.Context, in *WorkloadInfo, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.WorkloadStatusService/IsAllocatable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadStatusServiceServer is the server API for WorkloadStatusService service.
type WorkloadStatusServiceServer interface {
	ListAllVirtualMachineStats(context.Context, *empty.Empty) (*VirtualMachineStats, error)
	ListUserVirtualMachineStats(context.Context, *UserID) (*VirtualMachineStats, error)
	GetWorkloadObjectNameMeta(context.Context, *WorkloadMeta) (*WorkloadObjectNameMeta, error)
	IsAllocatable(context.Context, *WorkloadInfo) (*DummyResponse, error)
}

// UnimplementedWorkloadStatusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkloadStatusServiceServer struct {
}

func (*UnimplementedWorkloadStatusServiceServer) ListAllVirtualMachineStats(context.Context, *empty.Empty) (*VirtualMachineStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllVirtualMachineStats not implemented")
}
func (*UnimplementedWorkloadStatusServiceServer) ListUserVirtualMachineStats(context.Context, *UserID) (*VirtualMachineStats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserVirtualMachineStats not implemented")
}
func (*UnimplementedWorkloadStatusServiceServer) GetWorkloadObjectNameMeta(context.Context, *WorkloadMeta) (*WorkloadObjectNameMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadObjectNameMeta not implemented")
}
func (*UnimplementedWorkloadStatusServiceServer) IsAllocatable(context.Context, *WorkloadInfo) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAllocatable not implemented")
}

func RegisterWorkloadStatusServiceServer(s *grpc.Server, srv WorkloadStatusServiceServer) {
	s.RegisterService(&_WorkloadStatusService_serviceDesc, srv)
}

func _WorkloadStatusService_ListAllVirtualMachineStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadStatusServiceServer).ListAllVirtualMachineStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadStatusService/ListAllVirtualMachineStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadStatusServiceServer).ListAllVirtualMachineStats(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadStatusService_ListUserVirtualMachineStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadStatusServiceServer).ListUserVirtualMachineStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadStatusService/ListUserVirtualMachineStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadStatusServiceServer).ListUserVirtualMachineStats(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadStatusService_GetWorkloadObjectNameMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadMeta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadStatusServiceServer).GetWorkloadObjectNameMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadStatusService/GetWorkloadObjectNameMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadStatusServiceServer).GetWorkloadObjectNameMeta(ctx, req.(*WorkloadMeta))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadStatusService_IsAllocatable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkloadInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadStatusServiceServer).IsAllocatable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadStatusService/IsAllocatable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadStatusServiceServer).IsAllocatable(ctx, req.(*WorkloadInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkloadStatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WorkloadStatusService",
	HandlerType: (*WorkloadStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllVirtualMachineStats",
			Handler:    _WorkloadStatusService_ListAllVirtualMachineStats_Handler,
		},
		{
			MethodName: "ListUserVirtualMachineStats",
			Handler:    _WorkloadStatusService_ListUserVirtualMachineStats_Handler,
		},
		{
			MethodName: "GetWorkloadObjectNameMeta",
			Handler:    _WorkloadStatusService_GetWorkloadObjectNameMeta_Handler,
		},
		{
			MethodName: "IsAllocatable",
			Handler:    _WorkloadStatusService_IsAllocatable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abstract.proto",
}

// VirtManagementServiceClient is the client API for VirtManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VirtManagementServiceClient interface {
	CreateVirtualMachine(ctx context.Context, in *VmCreationRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	DeleteVirtualMachine(ctx context.Context, in *VmDeletionRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	StartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	StopVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	RestartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	ListVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	ListVirtualMachineInstance(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	ListDataVolume(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
}

type virtManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVirtManagementServiceClient(cc grpc.ClientConnInterface) VirtManagementServiceClient {
	return &virtManagementServiceClient{cc}
}

func (c *virtManagementServiceClient) CreateVirtualMachine(ctx context.Context, in *VmCreationRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/CreateVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) DeleteVirtualMachine(ctx context.Context, in *VmDeletionRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/DeleteVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) StartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/StartVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) StopVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/StopVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) RestartVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/RestartVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) ListVirtualMachine(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/ListVirtualMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) ListVirtualMachineInstance(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/ListVirtualMachineInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *virtManagementServiceClient) ListDataVolume(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/proto.VirtManagementService/ListDataVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VirtManagementServiceServer is the server API for VirtManagementService service.
type VirtManagementServiceServer interface {
	CreateVirtualMachine(context.Context, *VmCreationRequest) (*DummyResponse, error)
	DeleteVirtualMachine(context.Context, *VmDeletionRequest) (*DummyResponse, error)
	StartVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error)
	StopVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error)
	RestartVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error)
	ListVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error)
	ListVirtualMachineInstance(context.Context, *DummyRequest) (*DummyResponse, error)
	ListDataVolume(context.Context, *DummyRequest) (*DummyResponse, error)
}

// UnimplementedVirtManagementServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVirtManagementServiceServer struct {
}

func (*UnimplementedVirtManagementServiceServer) CreateVirtualMachine(context.Context, *VmCreationRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) DeleteVirtualMachine(context.Context, *VmDeletionRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) StartVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) StopVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) RestartVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) ListVirtualMachine(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachine not implemented")
}
func (*UnimplementedVirtManagementServiceServer) ListVirtualMachineInstance(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVirtualMachineInstance not implemented")
}
func (*UnimplementedVirtManagementServiceServer) ListDataVolume(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDataVolume not implemented")
}

func RegisterVirtManagementServiceServer(s *grpc.Server, srv VirtManagementServiceServer) {
	s.RegisterService(&_VirtManagementService_serviceDesc, srv)
}

func _VirtManagementService_CreateVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).CreateVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/CreateVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).CreateVirtualMachine(ctx, req.(*VmCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_DeleteVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VmDeletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).DeleteVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/DeleteVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).DeleteVirtualMachine(ctx, req.(*VmDeletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_StartVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).StartVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/StartVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).StartVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_StopVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).StopVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/StopVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).StopVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_RestartVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).RestartVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/RestartVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).RestartVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_ListVirtualMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).ListVirtualMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/ListVirtualMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).ListVirtualMachine(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_ListVirtualMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).ListVirtualMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/ListVirtualMachineInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).ListVirtualMachineInstance(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VirtManagementService_ListDataVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VirtManagementServiceServer).ListDataVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.VirtManagementService/ListDataVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VirtManagementServiceServer).ListDataVolume(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VirtManagementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.VirtManagementService",
	HandlerType: (*VirtManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVirtualMachine",
			Handler:    _VirtManagementService_CreateVirtualMachine_Handler,
		},
		{
			MethodName: "DeleteVirtualMachine",
			Handler:    _VirtManagementService_DeleteVirtualMachine_Handler,
		},
		{
			MethodName: "StartVirtualMachine",
			Handler:    _VirtManagementService_StartVirtualMachine_Handler,
		},
		{
			MethodName: "StopVirtualMachine",
			Handler:    _VirtManagementService_StopVirtualMachine_Handler,
		},
		{
			MethodName: "RestartVirtualMachine",
			Handler:    _VirtManagementService_RestartVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachine",
			Handler:    _VirtManagementService_ListVirtualMachine_Handler,
		},
		{
			MethodName: "ListVirtualMachineInstance",
			Handler:    _VirtManagementService_ListVirtualMachineInstance_Handler,
		},
		{
			MethodName: "ListDataVolume",
			Handler:    _VirtManagementService_ListDataVolume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "abstract.proto",
}
